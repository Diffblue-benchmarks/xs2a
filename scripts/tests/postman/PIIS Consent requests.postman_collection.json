{
	"info": {
		"_postman_id": "283ec40d-23c1-4300-a1d2-175aa5a04918",
		"name": "PIIS Consent requests copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Errorful requests",
			"item": [
				{
					"name": "wrong TPP in certificate",
					"item": [
						{
							"name": "1. Set ASPSP properties piisConsentSupported=true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e875b7ad-3c8b-4f08-b713-0ab4ebb3dbbb",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"frequencyPerDay\": 5,\n  \"combinedServiceIndicator\": false,\n  \"tppSignatureRequired\": false,\n  \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n  \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\",\n  \"multicurrencyAccountLevel\": \"SUBACCOUNT\",\n  \"bankOfferedConsentSupport\": true,\n  \"availableBookingStatuses\": [\n    \"both\"\n  ],\n  \"supportedAccountReferenceFields\": [\n    \"MSISDN\",\n    \"IBAN\"\n  ],\n  \"consentLifetime\": 0,\n  \"transactionLifetime\": 0,\n  \"allPsd2Support\": true,\n  \"transactionsWithoutBalancesSupported\": true,\n  \"signingBasketSupported\": true,\n  \"paymentCancellationAuthorizationMandated\": false,\n  \"piisConsentSupported\": true,\n  \"redirectUrlExpirationTimeMs\": 600000,\n  \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n  \"notConfirmedConsentExpirationPeriodMs\": 86400000,\n  \"notConfirmedPaymentExpirationPeriodMs\": 86400000,\n  \"supportedPaymentTypeAndProductMatrix\": {\n    \"payments\": [\n      \"sepa-credit-transfers\",\n      \"instant-sepa-credit-transfers\"\n    ],\n    \"periodic-payments\": [\n      \"sepa-credit-transfers\",\n      \"instant-sepa-credit-transfers\"\n    ],\n    \"bulk-payments\": [\n      \"sepa-credit-transfers\",\n      \"instant-sepa-credit-transfers\"\n    ]\n  },\n  \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000,\n  \"availableAccountsConsentSupported\": true,\n  \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n  \"psuInInitialRequestMandated\": false,\n  \"forceXs2aBaseUrl\": false,\n  \"deltaListSupported\": false,\n  \"entryReferenceFromSupported\": false,\n  \"supportedTransactionApplicationTypes\": []\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create PIIS consent request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7611098-dd39-46aa-bdfa-e2280fb9dab2",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"consentId is exist\", () => {",
											"    ",
											"    pm.expect(jsonData).to.have.property('consentId');",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2691de1f-ad62-453d-94bc-a4c3d121f9fb",
										"exec": [
											"pm.globals.unset(\"payment_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "PSU-IP-Address",
										"type": "text",
										"value": "{{ip_address}}"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{x_request_id}}"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"type": "text",
										"value": "true"
									},
									{
										"key": "TPP-Redirect-URI",
										"type": "text",
										"value": "TPP-Redirect-URI"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"type": "text",
										"value": "TPP-Nok-Redirect-URI"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account\": {\n    \"aspspAccountId\": \"125-DEDE89370400440532013000-EUR\",\n    \"currency\": \"EUR\",\n    \"iban\": \"{{iban_multiple}}\"\n  },\n  \"cardExpiryDate\": \"2020-12-31\",\n  \"cardInformation\": \"MyMerchant Loyalty Card\",\n  \"cardNumber\": 1234567891234,\n  \"registrationInformation\": \"Your contract Number 1234 with MyMerchant is completed with the registration with your bank.\",\n  \"tppAuthorisationNumber\": \"PSDDE-FAKENCA-87B2AC\",\n  \"validUntil\": \"2020-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										""
									]
								},
								"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
							},
							"response": []
						},
						{
							"name": "3. Fund confirmation request WRONG certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02b43079-3a6d-4e12-b69f-0a6d74a5c9b9",
										"exec": [
											"pm.test('Status code is 400', () => {",
											"   pm.response.to.have.status(400);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('TppMessages and error are exist', () => {",
											"    ",
											"    pm.expect(jsonData).to.have.property('tppMessages');",
											"    ",
											"    var error = jsonData.tppMessages[0];",
											"       ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesnâ€™t match the initial request');",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "-----BEGIN CERTIFICATE-----MIIFNzCCAx+gAwIBAgIEGA6XzTANBgkqhkiG9w0BAQsFADB4MQswCQYDVQQGEwJERTEQMA4GA1UECAwHQkFWQVJJQTESMBAGA1UEBwwJTnVyZW1iZXJnMSIwIAYDVQQKDBlUcnVzdCBTZXJ2aWNlIFByb3ZpZGVyIEFHMR8wHQYDVQQLDBZJbmZvcm1hdGlvbiBUZWNobm9sb2d5MB4XDTE5MDYxOTA4MjA1MVoXDTIwMDYxODAwMDAwMFowgcIxFDASBgNVBAoMC0F3ZXNvbWUgVFBQMRswGQYDVQQDDBJzdXBlciBYUzJBIFNhbmRib3gxHjAcBgoJkiaJk/IsZAEZFg5hd2Vzb21lLXRwcC5kZTEWMBQGA1UECwwNSVQgZGVwYXJ0bWVudDEQMA4GA1UEBhMHR2VybWFueTEPMA0GA1UECAwGQmF5ZXJuMRIwEAYDVQQHDAlOdXJlbWJlcmcxHjAcBgNVBGEMFVBTRERFLUZBS0VOQ0EtSUQxMjM0NTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIMWGQFWG3IomW9mcT9i96JDv78osbbwJM2MkOjB8fqDm1pFSCOc+4T4XVGJ2KxD77cnDBYP/FeNuJOuOZRzQAVDVi8Yq71oQn8OjWw/KQMqPLDogXyuDDAFf411XkI//zJ08S57/0xS8ASq831SzaoBeVbWlAKSV7UNzp4BTvAGMJjvq8NpSQ/xWccLO4Ffn74JjPoXO0AEPsU20Ov54hIj9vUpoO75f75FRJU4O0ZsJkqdwLPH68FQE1703kSHbbVGsckBrnPMxVBcr00egpgIy0NHyAGkj6z1a1og4ljP60k9qyarsu/93RdtZUjGAX2dUYZ9DbP4FFbjRPa2LX8CAwEAAaN+MHwwegYIKwYBBQUHAQMEbjBsBgYEAIGYJwIwYjA5MBEGBwQAgZgnAQMMBlBTUF9BSTARBgcEAIGYJwECDAZQU1BfUEkwEQYHBACBmCcBBAwGUFNQX0lDDBlUcnVzdCBTZXJ2aWNlIFByb3ZpZGVyIEFHDApERS1GQUtFTkNBMA0GCSqGSIb3DQEBCwUAA4ICAQC+JXIp0mHcJYNPK/IjyijF1g4xDfCEtAax32ntnfBs32uAVHVtvNduDXOd8mPvYimJpcKV0pHJd1ko6Lct7CPymHT7Akm5goBK39pU1SGt+zBx393Er9YKx0l3bBFzU3Brs7Tf1Kf7HLxVvRs39bAvknYDc9Geb5bCWyu2rlvYAi+6uPnJtQbiZYZHMaxUN5NlgMHLBtbp881yqlJsCJ9QmLKLraer/tIaay/uuVMQrH1JOZ89QP0x800DfvLrwVOjT0UFpGlRqtSHuiOppmVZctn9FvxibBgaah0cHHtJaVj+bYyRvIgxUpDQkqNUJIcntnWW2xRRsJi+w7pAP6gXDK/MXeZRA2n9EhpSfncs6pRce/wCKpSxDlhkJndwnit5VG8WmiQBgp/5fbAR0ftcLKkyiJDSLzZ9lO4NrEpGr98jqC3JqqYT6siuhiWZE184ef0HVuHBIdycnEtIQ8SLZ2hrIE2T3jsAqTHyFvbRp8ErDeafltpmWq8PhsGhtEN2vD5Y3xFq0eh3oPgWhJBYJ+dou4P/YV2kAyPCTaWROIYtGx/6MkhA/zx6XEw71u1jkrrwD55+BKyEffYYsQ9rZRxsDJmdusiTwd/sC41OB7qL+e7Q2BIcmLtHX47zVaX+R2Z55mvvYnOq/FsJqUfZ/2JubtnsJPYUl5gynoiAsQ==-----END CERTIFICATE-----",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account\": {\n\t\t\"currency\": \"EUR\",\n\t    \"iban\": \"{{iban_multiple}}\"\n},\n  \"cardNumber\": \"12345\",\n  \"instructedAmount\": {\n    \"amount\": \"160.00\",\n    \"currency\": \"EUR\"\n  },\n  \"payee\": \"Check24\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/funds-confirmations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"funds-confirmations"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "1. Update ASPSP profile settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "67af457a-0c1a-44da-8b16-9af106584c29",
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"frequencyPerDay\": 5,\n    \"combinedServiceIndicator\": false,\n    \"tppSignatureRequired\": false,\n    \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/\",\n    \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/\",\n    \"multicurrencyAccountLevel\": \"SUBACCOUNT\",\n    \"bankOfferedConsentSupport\": true,\n    \"availableBookingStatuses\": [\n        \"both\"\n    ],\n    \"supportedAccountReferenceFields\": [\n        \"IBAN\"\n    ],\n    \"consentLifetime\": 0,\n    \"transactionLifetime\": 0,\n    \"allPsd2Support\": true,\n    \"transactionsWithoutBalancesSupported\": true,\n    \"signingBasketSupported\": false,\n    \"paymentCancellationAuthorizationMandated\": false,\n    \"piisConsentSupported\": true,\n    \"redirectUrlExpirationTimeMs\": 600000,\n    \"authorisationExpirationTimeMs\": 0,\n    \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/\",\n    \"notConfirmedConsentExpirationPeriodMs\": 86400000,\n    \"notConfirmedPaymentExpirationPeriodMs\": 86400000,\n    \"supportedPaymentTypeAndProductMatrix\": {\n        \"payments\": [\n            \"sepa-credit-transfers\",\n            \"instant-sepa-credit-transfers\"\n        ],\n        \"periodic-payments\": [\n            \"sepa-credit-transfers\",\n            \"instant-sepa-credit-transfers\"\n        ],\n        \"bulk-payments\": [\n            \"sepa-credit-transfers\",\n            \"instant-sepa-credit-transfers\"\n        ]\n    },\n    \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000,\n    \"availableAccountsConsentSupported\": true,\n    \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n    \"psuInInitialRequestMandated\": false,\n    \"forceXs2aBaseUrl\": false,\n    \"xs2aBaseUrl\": \"http://myhost.com/\",\n    \"deltaListSupported\": false,\n    \"entryReferenceFromSupported\": false,\n    \"supportedTransactionApplicationTypes\": [\n        \"JSON\"\n    ],\n    \"startAuthorisationMode\": \"AUTO\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_aspsp_profile}}"
					],
					"path": [
						"api",
						"v1",
						"aspsp-profile",
						"for-debug",
						"aspsp-settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Create PIIS consent in CMS-ASPSP-API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c9efc2d-6b20-48d6-8729-cb958af978e5",
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"PIIS consent ID exists\", () => {",
							"   pm.expect(jsonData).to.have.property('consentId');",
							"});",
							"",
							"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "psu-id",
						"value": "{{psu_id_none}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\"\n  },\n  \"tppAuthorisationNumber\": \"PSDDE-FAKENCA-87B2AC\",\n  \"validUntil\": \"2020-10-10\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_cms}}"
					],
					"path": [
						"aspsp-api",
						"v1",
						"piis",
						"consents",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Authorise in ledgers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c9efc2d-6b20-48d6-8729-cb958af978e5",
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Bearer token exists\", () => {",
							"   pm.expect(jsonData).to.have.property('bearerToken');",
							"});",
							"",
							"var tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\")",
							"",
							"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "psu-id",
						"type": "text",
						"value": "{{psu_id_none}}",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_none}}&pin={{psu_id_password}}&role=CUSTOMER",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_ledgers}}"
					],
					"path": [
						"users",
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "{{psu_id_none}}"
						},
						{
							"key": "pin",
							"value": "{{psu_id_password}}"
						},
						{
							"key": "role",
							"value": "CUSTOMER"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Execute /me request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c9efc2d-6b20-48d6-8729-cb958af978e5",
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"User ID exists\", () => {",
							"   pm.expect(jsonData).to.have.property('id');",
							"});",
							"",
							"pm.globals.set(\"userId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ledgersBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{url_ledgers}}/users/me",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_ledgers}}"
					],
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Create PIIS consent in ledgers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c9efc2d-6b20-48d6-8729-cb958af978e5",
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"SCA status exists\", () => {",
							"   pm.expect(jsonData).to.have.property('scaStatus');",
							"});",
							"",
							"pm.globals.set(\"ledgersResponse\", JSON.stringify(jsonData));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ledgersBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"access\": {\n    \"accounts\": [\n         \"{{iban_none}}\"\n    ]\n  },\n  \"frequencyPerDay\": 4,\n  \"tppId\": \"PSDDE-FAKENCA-87B2AC\",\n  \"userId\": \"{{userId}}\",\n  \"validUntil\": \"2020-10-10\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url_ledgers}}/consents/piis",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_ledgers}}"
					],
					"path": [
						"consents",
						"piis"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Update ASPSP consent data for the given PIIS consent in CMS-PSU-API Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4cdb2bc7-e7a4-463d-b867-d67addf82fc1",
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a369776b-06b6-4114-8c55-7f3b2f865a1d",
						"exec": [
							"var ledgersResponse = pm.globals.get(\"ledgersResponse\");",
							"var utf8string = CryptoJS.enc.Utf8.parse(ledgersResponse);",
							"",
							"pm.globals.set(\"encodedLedgersResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersResponse}}\",\n  \"consentId\": \"{{piis_consent_id}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{piis_consent_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_cms}}"
					],
					"path": [
						"psu-api",
						"v1",
						"aspsp-consent-data",
						"consents",
						"{{piis_consent_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. Fund confirmation request in xs2a",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ff8da433-7a07-44be-8f3b-18b88ed71393",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"fundsAvailable is present\", () => {",
							"    pm.expect(jsonData).to.have.property('fundsAvailable');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\"\n  },\n  \"instructedAmount\": {\n    \"amount\": \"100.00\",\n    \"currency\": \"EUR\"\n  },\n  \"payee\": \"Check24\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/funds-confirmations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"funds-confirmations"
					]
				}
			},
			"response": []
		}
	]
}